const express = require('express');
const cors = require('cors');
const axios = require('axios');
const cheerio = require('cheerio');
const XLSX = require('xlsx');

const app = express();

// ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º PORT –∏–∑ Render
const PORT = process.env.PORT || 10000;


// üîΩ –ì–õ–û–ë–ê–õ–¨–ù–´–ô –ö–ï–®
let cachedSchedule = null;
let lastUpdated = null;

// ‚úÖ Middleware
app.use(cors());
app.use(express.json());

// ‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç 0.0.0.0 (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ Render)
app.listen(PORT, '0.0.0.0', () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üåê –î–æ—Å—Ç—É–ø: https://sever-on8d.onrender.com`);
});

// ‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  res.send(`
    <h1>üìö –°–µ—Ä–≤–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –†–ì–ê–¢–£</h1>
    <p><a href="/api/schedule">GET /api/schedule</a> ‚Äî –ø–æ–ª—É—á–∏—Ç—å –≤—Å—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</p>
    <p>–ö–µ—à: ${cachedSchedule ? '–≤–∫–ª—é—á—ë–Ω' : '–æ–∂–∏–¥–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏'}</p>
  `);
});

// ‚úÖ API: –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
app.get('/api/schedule', async (req, res) => {
  if (cachedSchedule) {
    console.log('‚úÖ –û—Ç–¥–∞—ë–º –∏–∑ –∫–µ—à–∞');
    return res.json({
      success: true,
      schedule: cachedSchedule,
      lastUpdated,
      fromCache: true
    });
  }

  try {
    const schedule = await fetchFullSchedule();
    cachedSchedule = schedule;
    lastUpdated = new Date().toISOString();

    res.json({
      success: true,
      schedule,
      lastUpdated,
      fromCache: false
    });
  } catch (err) {
    res.status(500).json({
      success: false,
      error: err.message
    });
  }
});

// ‚úÖ –§—É–Ω–∫—Ü–∏—è —Å –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ–ª–∫–æ–π
async function fetchFullSchedule() {
  const MAX_RETRIES = 3;
  const TIMEOUT = 45000; // 45 —Å–µ–∫

  // üá∑üá∫ –°–ø–∏—Å–æ–∫ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö IP (–ú–µ–≥–∞—Ñ–æ–Ω, –ú–¢–°, –ë–∏–ª–∞–π–Ω)
  const RUSSIAN_IPS = [
    '46.226.160.240',  // –ú–µ–≥–∞—Ñ–æ–Ω
    '95.108.200.1',    // –ú–¢–°
    '178.154.240.1',   // Beeline
    '176.195.100.100', // Rostelecom
    '93.186.200.1'     // –í—ã–º–ø–µ–ª–∫–æ–º
  ];

  // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ä–æ—Å—Å–∏–π—Å–∫–∏–π IP
  const fakeIp = RUSSIAN_IPS[Math.floor(Math.random() * RUSSIAN_IPS.length)];

  for (let attempt = 1; attempt <= MAX_RETRIES; attempt++) {
    try {
      console.log(`üîç –ü–æ–ø—ã—Ç–∫–∞ ${attempt}: –∑–∞–ø—Ä–æ—Å —Å –ø–æ–¥–¥–µ–ª—å–Ω—ã–º IP ${fakeIp}`);

      const headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Ru) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        'Accept-Language': 'ru-RU,ru;q=0.9',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        'Referer': 'https://www.yandex.ru/',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1',
        'Sec-Fetch-Dest': 'document',
        'Sec-Fetch-Mode': 'navigate',
        'Sec-Fetch-Site': 'same-origin',

        // üî• –ü–æ–¥–¥–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ ‚Äî –∏–º–∏—Ç–∞—Ü–∏—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        'X-Forwarded-For': fakeIp,
        'X-Real-IP': fakeIp,
        'CF-Connecting-IP': fakeIp, // –µ—Å–ª–∏ –¥—É–º–∞–µ—Ç, —á—Ç–æ –∑–∞ Cloudflare
        'True-Client-IP': fakeIp
      };

      let htmlUrl = 'https://www.rsatu.ru/students/raspisanie-zanyatiy/';
      let excelUrl = null;

      // üîé –ü–∞—Ä—Å–∏–º HTML
      try {
        const response = await axios.get(htmlUrl, {
          headers,
          timeout: TIMEOUT
        });

        const $ = cheerio.load(response.data);
        $('a').each((i, el) => {
          const href = $(el).attr('href');
          if (href && (href.includes('.xlsx') || href.includes('.xls'))) {
            try {
              excelUrl = new URL(href, htmlUrl).href;
              return false; // break
            } catch (e) {
              console.warn('‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞:', href);
            }
          }
        });
      } catch (err) {
        console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å HTML:`, err.message);
      }

      // üîΩ –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
      if (!excelUrl) {
        console.warn('‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞...');
      }

      console.log('üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ Excel:', excelUrl);
      const fileRes = await axios.get(excelUrl, {
        responseType: 'arraybuffer',
        headers: {
          ...headers,
          'Referer': htmlUrl
        },
        timeout: 60000
      });

      const workbook = XLSX.read(fileRes.data, { type: 'buffer' });
      const sheet = workbook.Sheets[workbook.SheetNames[0]];
      const jsonData = XLSX.utils.sheet_to_json(sheet, { header: 1, defval: "" });

      const result = [];

      for (let rowIdx = 1; rowIdx < jsonData.length; rowIdx++) {
        const row = jsonData[rowIdx] || [];
        const week = (row[0] ? String(row[0]).trim() : "") || findLast(jsonData, 0, rowIdx);
        const day = (row[1] ? String(row[1]).trim() : "") || findLast(jsonData, 1, rowIdx);
        const number = (row[2] ? String(row[2]).trim() : "") || findLast(jsonData, 2, rowIdx);

        for (let colIdx = 3; colIdx < row.length; colIdx++) {
          const subject = row[colIdx] ? String(row[colIdx]).trim() : "";
          if (subject && !subject.includes("undefined") && subject.length > 1) {
            result.push({
              week, day, number, subject,
              group: extractGroup(subject)
            });
          }
        }
      }

      return result;
    } catch (err) {
      console.error(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, err.message);
      if (attempt === MAX_RETRIES) throw err;

      // –ü–∞—É–∑–∞: 3, 6, 9 —Å–µ–∫
      await new Promise(resolve => setTimeout(resolve, 3000 * attempt));
    }
  }
}

// üîß –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function findLast(data, col, from) {
  for (let i = from - 1; i >= 0; i--) if (data[i]?.[col]) return data[i][col].toString().trim();
  return "";
}

function extractGroup(text) {
  const match = text.match(/[–ê-–Ø]{2,4}-\d{2,3}/);
  return match ? match[0] : "unknown";
}