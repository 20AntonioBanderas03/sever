const express = require('express');
const cors = require('cors');
const axios = require('axios');
const cheerio = require('cheerio');
const XLSX = require('xlsx');

const app = express();

// ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º PORT –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è (Render –æ–∂–∏–¥–∞–µ—Ç 10000)
const PORT = process.env.PORT || 10000;

// ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏
const SCHEDULE_PAGE_URL = 'https://www.rsatu.ru/students/raspisanie-zanyatiy/';
const TARGET_LINK_TEXT = '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π';

// üîΩ –ü–†–Ø–ú–ê–Ø –°–°–´–õ–ö–ê –ù–ê EXCEL (–µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç)
// –ó–∞–º–µ–Ω–∏ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—É—é, –µ—Å–ª–∏ –∑–Ω–∞–µ—à—å. –ü—Ä–∏–º–µ—Ä:
const FALLBACK_EXCEL_URL = 'https://www.rsatu.ru/upload/files/raspisanie.xlsx';

// üîΩ –ì–õ–û–ë–ê–õ–¨–ù–´–ô –ö–ï–® (—á—Ç–æ–±—ã –Ω–µ –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∂–¥—ã–π —Ä–∞–∑)
let cachedSchedule = null;
let lastUpdated = null;

// ‚úÖ Middleware
app.use(cors());
app.use(express.json());

// ‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Äî –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
app.get('/', (req, res) => {
  res.send(`
    <h1>üìö –°–µ—Ä–≤–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –†–ì–ê–¢–£</h1>
    <p><a href="/api/schedule">GET /api/schedule</a> ‚Äî –ø–æ–ª—É—á–∏—Ç—å –≤—Å—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</p>
    <p>–ö–µ—à: ${cachedSchedule ? '–≤–∫–ª—é—á–µ–Ω' : '–æ–∂–∏–¥–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏'}</p>
    <p>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${lastUpdated || '–Ω–µ –±—ã–ª–æ'}</p>
  `);
});

// ‚úÖ API: –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
app.get('/api/schedule', async (req, res) => {
  if (cachedSchedule) {
    console.log('‚úÖ –û—Ç–¥–∞—ë–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –∫–µ—à–∞');
    return res.json({
      success: true,
      schedule: cachedSchedule,
      lastUpdated,
      fromCache: true
    });
  }

  try {
    const schedule = await fetchFullSchedule();
    cachedSchedule = schedule;
    lastUpdated = new Date().toISOString();

    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${schedule.length} —Å—Ç—Ä–æ–∫`);
    res.json({
      success: true,
      schedule,
      lastUpdated,
      fromCache: false
    });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', err.message);
    res.status(500).json({
      success: false,
      error: err.message
    });
  }
});

// ‚úÖ –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å —Ä–µ—Ç—Ä–∞—è–º–∏
async function fetchFullSchedule() {
  const MAX_RETRIES = 3;
  const TIMEOUT = 45000; // 45 —Å–µ–∫—É–Ω–¥

  for (let attempt = 1; attempt <= MAX_RETRIES; attempt++) {
    try {
      console.log(`üîç –ü–æ–ø—ã—Ç–∫–∞ ${attempt}: –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –†–ì–ê–¢–£...`);
      
      let htmlUrl = SCHEDULE_PAGE_URL;
      let excelUrl = null;

      // üîé –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Excel
      try {
        const response = await axios.get(htmlUrl, {
          headers: {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Ru) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept-Language': 'ru-RU,ru;q=0.9',
            'Referer': 'https://www.yandex.ru/',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            'Connection': 'keep-alive'
          },
          timeout: TIMEOUT,
          maxRedirects: 10
        });

        const $ = cheerio.load(response.data);

        $('a').each((i, el) => {
          const href = $(el).attr('href');
          if (href && (href.includes('.xlsx') || href.includes('.xls'))) {
            try {
              excelUrl = new URL(href, SCHEDULE_PAGE_URL).href;
              return false; // break
            } catch (e) {
              console.warn('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞:', href);
            }
          }
        });
      } catch (parseErr) {
        console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å HTML (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}):`, parseErr.message);
      }

      // üîΩ –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
      if (!excelUrl) {
        console.warn('‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback...');
        excelUrl = FALLBACK_EXCEL_URL;
      }

      console.log('üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ Excel-—Ñ–∞–π–ª–∞:', excelUrl);
      const fileRes = await axios.get(excelUrl, {
        responseType: 'arraybuffer',
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Ru) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
          'Referer': SCHEDULE_PAGE_URL
        },
        timeout: 60000 // –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
      });

      // üîÅ –ß—Ç–µ–Ω–∏–µ Excel
      const workbook = XLSX.read(fileRes.data, { type: 'buffer' });
      const sheet = workbook.Sheets[workbook.SheetNames[0]];
      const jsonData = XLSX.utils.sheet_to_json(sheet, { header: 1, defval: "" });

      const result = [];

      for (let rowIdx = 1; rowIdx < jsonData.length; rowIdx++) {
        const row = jsonData[rowIdx] || [];
        const week = (row[0] ? String(row[0]).trim() : "") || findLastValue(jsonData, 0, rowIdx);
        const day = (row[1] ? String(row[1]).trim() : "") || findLastValue(jsonData, 1, rowIdx);
        const number = (row[2] ? String(row[2]).trim() : "") || findLastValue(jsonData, 2, rowIdx);

        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã (—Å—Ç–æ–ª–±—Ü—ã D –∏ –¥–∞–ª–µ–µ)
        for (let colIdx = 3; colIdx < row.length; colIdx++) {
          const subject = row[colIdx] ? String(row[colIdx]).trim() : "";
          if (subject && subject.length > 1 && !subject.includes("undefined")) {
            result.push({
              week,
              day,
              number,
              subject,
              group: extractGroupFromSubject(subject)
            });
          }
        }
      }

      return result;
    } catch (err) {
      console.error(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, err.message);

      if (attempt === MAX_RETRIES) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å–ª–µ ${MAX_RETRIES} –ø–æ–ø—ã—Ç–æ–∫: ${err.message}`);
      }

      // –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π: 3, 6, 9 —Å–µ–∫
      await new Promise(resolve => setTimeout(resolve, 3000 * attempt));
    }
  }
}

// üîß –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

function findLastValue(data, col, fromRow) {
  for (let i = fromRow - 1; i >= 0; i--) {
    if (data[i]?.[col]) return String(data[i][col]).trim();
  }
  return "";
}

function extractGroupFromSubject(text) {
  const match = text.match(/[–ê-–Ø]{2,4}-\d{2,3}/); // –ù–∞–ø—Ä–∏–º–µ—Ä: –ò–ü–ë-24, –¢–ú-23
  return match ? match[0].toUpperCase() : "unknown";
}

// ‚úÖ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, '0.0.0.0', () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üåê –î–æ—Å—Ç—É–ø–µ–Ω –ø–æ: https://sever-on8d.onrender.com`);
});