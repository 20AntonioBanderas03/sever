const express = require('express');
const cors = require('cors');
const axios = require('axios');
const cheerio = require('cheerio');
const fs = require('fs');
const path = require('path');
const XLSX = require('xlsx');
const cron = require('node-cron');

const app = express();
const PORT = 5000;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
const BASE_URL = 'https://www.rsatu.ru';
const SCHEDULE_PAGE_URL = 'https://www.rsatu.ru/students/raspisanie-zanyatiy/';
const DOWNLOAD_DIR = './downloads';
const TARGET_LINK_TEXT = '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π';

if (!fs.existsSync(DOWNLOAD_DIR)) {
  fs.mkdirSync(DOWNLOAD_DIR, { recursive: true });
}

app.use(cors());
app.use(express.json());
app.use('/schedules', express.static(DOWNLOAD_DIR)); // –°—Ç–∞—Ç–∏–∫–∞: –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∞–π–ª—ã

// === –ü–ê–†–°–ò–ù–ì –°–°–´–õ–ö–ò ===
async function findScheduleLink() {
  try {
    const response = await axios.get(SCHEDULE_PAGE_URL, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
      }
    });

    const $ = cheerio.load(response.data);
    const links = [];

    $('a').each((i, el) => {
      const text = $(el).text().trim();
      const href = $(el).attr('href');
      if (!href) return;

      const fullUrl = new URL(href, SCHEDULE_PAGE_URL).href;
      if (text.includes(TARGET_LINK_TEXT) || text.toLowerCase().includes('—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ') || href.includes('.xlsx')) {
        links.push({ text, href, fullUrl });
      }
    });

    if (links.length === 0) throw new Error('–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');

    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: .xlsx
    const excelLink = links.find(l => l.fullUrl.includes('.xlsx'));
    return (excelLink || links[0]).fullUrl;
  } catch (err) {
    console.error('‚ùå –ü–∞—Ä—Å–∏–Ω–≥ —Å—Å—ã–ª–∫–∏:', err.message);
    throw err;
  }
}

// === –°–ö–ê–ß–ò–í–ê–ù–ò–ï –§–ê–ô–õ–ê ===
async function downloadFile(url) {
  try {
    const response = await axios.get(url, {
      responseType: 'arraybuffer',
      headers: { 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36' }
    });

    const filename = path.basename(new URL(url).pathname) || 'schedule.xlsx';
    const filePath = path.join(DOWNLOAD_DIR, filename);

    fs.writeFileSync(filePath, response.data);
    console.log(`‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ${filePath}`);
    return filePath;
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', err.message);
    throw err;
  }
}

// === –ß–¢–ï–ù–ò–ï –ò –û–ë–†–ê–ë–û–¢–ö–ê EXCEL ===
function extractGroupSchedule(filePath, targetGroup) {
  try {
    const workbook = XLSX.readFile(filePath);
    const sheet = workbook.Sheets[workbook.SheetNames[0]];
    const data = XLSX.utils.sheet_to_json(sheet, { header: 1, defval: "" }); // defval: "" ‚Äî —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ undefined

    let groupColIndex = -1;

    // üîç –ü–æ–∏—Å–∫ –∫–æ–ª–æ–Ω–∫–∏ —Å –≥—Ä—É–ø–ø–æ–π (–∏—â–µ–º –≤ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ —Ç–∞–±–ª–∏—Ü—ã)
    for (let rowIdx = 0; rowIdx < Math.min(data.length, 20); rowIdx++) {
      const row = data[rowIdx] || [];
      for (let colIdx = 3; colIdx < row.length; colIdx++) {
        const cell = String(row[colIdx]).trim();
        if (cell.toUpperCase() === targetGroup.toUpperCase()) {
          groupColIndex = colIdx;
          break;
        }
      }
      if (groupColIndex !== -1) break;
    }

    if (groupColIndex === -1) {
      throw new Error(`–ì—Ä—É–ø–ø–∞ "${targetGroup}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ`);
    }

    const result = [];

    // üîÅ –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –í–°–ï–ú —Å—Ç—Ä–æ–∫–∞–º, –Ω–∞—á–∏–Ω–∞—è —Å 1 (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∞–ø–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å)
    for (let rowIdx = 1; rowIdx < data.length; rowIdx++) {
      const row = data[rowIdx] || [];
      
      const weekCell = row[0] ? String(row[0]).trim() : "";
      const dayCell = row[1] ? String(row[1]).trim() : "";
      const numberCell = row[2] ? String(row[2]).trim() : "";
      const subjectCell = row[groupColIndex] ? String(row[groupColIndex]).trim() : "";

      // ‚úÖ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –∏ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ—Ç, –∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏
      if (!subjectCell) continue;

      // üü° –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç: –µ—Å–ª–∏ week/day/number –ø—É—Å—Ç—ã–µ ‚Äî –∏—â–µ–º –≤—ã—à–µ
      let week = weekCell;
      let day = dayCell;
      let number = numberCell;

      // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ–Ω—å/–Ω–µ–¥–µ–ª—é/–Ω–æ–º–µ—Ä ‚Äî –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–µ–ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—à–µ
      if (!week) {
        for (let i = rowIdx - 1; i >= 0; i--) {
          const w = data[i]?.[0];
          if (w) {
            week = String(w).trim();
            break;
          }
        }
      }
      if (!day) {
        for (let i = rowIdx - 1; i >= 0; i--) {
          const d = data[i]?.[1];
          if (d) {
            day = String(d).trim();
            break;
          }
        }
      }
      if (!number) {
        for (let i = rowIdx - 1; i >= 0; i--) {
          const n = data[i]?.[2];
          if (n) {
            number = String(n).trim();
            break;
          }
        }
      }

      // ‚úÖ –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏ —Ö–æ—Ç—è –±—ã –¥–µ–Ω—å ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º
      if (subjectCell && (day || week)) {
        result.push({
          week: week || "‚Äî",
          day: day || "‚Äî",
          number: number || "‚Äî",
          subject: subjectCell,
        });
      }
    }

    if (result.length === 0) {
      throw new Error(`–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã "${targetGroup}" –Ω–∞–π–¥–µ–Ω–æ, –Ω–æ –ø—Ä–µ–¥–º–µ—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã`);
    }

    return result;
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Excel:", err.message);
    throw err;
  }
}

// === API ===
app.post('/api/schedule', async (req, res) => {
  const { group } = req.body;

  if (!group) {
    return res.status(400).json({ error: '–ù–µ —É–∫–∞–∑–∞–Ω–∞ –≥—Ä—É–ø–ø–∞' });
  }

  try {
    const link = await findScheduleLink();
    const filePath = await downloadFile(link);
    const schedule = await extractGroupSchedule(filePath, group.trim());

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON
    res.json({
      success: true,
      schedule,
      lastUpdated: new Date().toISOString(),
      source: link
    });
  } catch (err) {
    res.status(500).json({
      success: false,
      error: err.message
    });
  }
});

// === –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤ ===
cron.schedule('0 */6 * * *', async () => {
  console.log('‚è∞ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...');
  try {
    const link = await findScheduleLink();
    const filePath = await downloadFile(link);
    console.log(`‚úÖ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: —Å–∫–∞—á–∞–Ω–æ ${path.basename(filePath)}`);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', err.message);
  }
});

app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});