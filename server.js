const express = require('express');
const cors = require('cors');
const axios = require('axios');
const cheerio = require('cheerio');
const XLSX = require('xlsx');

const app = express();

// ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º PORT –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const PORT = process.env.PORT || 10000;

// ‚úÖ –ü–∞—Ä—Å–∏–º JSON (–Ω–∞ –±—É–¥—É—â–µ–µ)
app.use(cors());
app.use(express.json());

// üîΩ –ì–õ–û–ë–ê–õ–¨–ù–´–ô –ö–ï–®
let cachedSchedule = null;
let lastUpdated = null;

// ‚úÖ –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel
async function fetchFullSchedule() {
  const SCHEDULE_PAGE_URL = 'https://www.rsatu.ru/students/raspisanie-zanyatiy/';
  const TARGET_LINK_TEXT = '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π';

  try {
    console.log('üîç –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –†–ì–ê–¢–£...');
    const { data } = await axios.get(SCHEDULE_PAGE_URL, {
      headers: { 'User-Agent': 'Mozilla/5.0 (compatible)' },
      timeout: 15000
    });

    const $ = cheerio.load(data);
    let excelUrl = null;

    $('a').each((i, el) => {
      const href = $(el).attr('href');
      if (href && (href.includes('.xlsx') || href.includes('.xls'))) {
        excelUrl = new URL(href, SCHEDULE_PAGE_URL).href;
        return false; // break
      }
    });

    if (!excelUrl) throw new Error('–°—Å—ã–ª–∫–∞ –Ω–∞ Excel –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');

    console.log('üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ Excel...');
    const fileRes = await axios.get(excelUrl, {
      responseType: 'arraybuffer',
      headers: { 'User-Agent': 'Mozilla/5.0 (compatible)' }
    });

    const workbook = XLSX.read(fileRes.data, { type: 'buffer' });
    const sheet = workbook.Sheets[workbook.SheetNames[0]];
    const jsonData = XLSX.utils.sheet_to_json(sheet, { header: 1, defval: "" });

    const result = [];

    // üîÅ –ü—Ä–æ—Ö–æ–¥ –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º
    for (let rowIdx = 1; rowIdx < jsonData.length; rowIdx++) {
      const row = jsonData[rowIdx] || [];
      const week = row[0]?.toString().trim() || findLast(data, 0, rowIdx);
      const day = row[1]?.toString().trim() || findLast(data, 1, rowIdx);
      const number = row[2]?.toString().trim() || findLast(data, 2, rowIdx);

      // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã (—Å—Ç–æ–ª–±—Ü—ã D+)
      for (let colIdx = 3; colIdx < row.length; colIdx++) {
        const subject = row[colIdx]?.toString().trim();
        if (subject && subject.length > 1 && !subject.includes("undefined")) {
          result.push({
            week, day, number, subject,
            group: extractGroupName(subject) // –ø–æ–ø—Ä–æ–±—É–µ–º –≤—ã—Ç–∞—â–∏—Ç—å –≥—Ä—É–ø–ø—É –∏–∑ —Å—Ç—Ä–æ–∫–∏
          });
        }
      }
    }

    return result;
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', err.message);
    throw err;
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function findLast(data, col, from) {
  for (let i = from - 1; i >= 0; i--) if (data[i]?.[col]) return data[i][col].toString().trim();
  return "";
}

function extractGroupName(cell) {
  // –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ –µ—Å—Ç—å "–ò–ü–ë-24", –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
  const match = cell.match(/[–ê-–Ø]{2,4}-\d{2,3}/);
  return match ? match[0] : "unknown";
}

// ‚úÖ –ï–¥–∏–Ω—ã–π GET-—ç–Ω–¥–ø–æ–∏–Ω—Ç
app.get('/api/schedule', async (req, res) => {
  if (cachedSchedule) {
    console.log('‚úÖ –û—Ç–¥–∞—ë–º –∏–∑ –∫–µ—à–∞');
    return res.json({
      success: true,
      schedule: cachedSchedule,
      lastUpdated,
      fromCache: true
    });
  }

  try {
    const schedule = await fetchFullSchedule();
    cachedSchedule = schedule;
    lastUpdated = new Date().toISOString();

    console.log('‚úÖ –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    res.json({
      success: true,
      schedule,
      lastUpdated,
      fromCache: false
    });
  } catch (err) {
    res.status(500).json({
      success: false,
      error: err.message
    });
  }
});

// ‚úÖ –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
app.get('/', (req, res) => {
  res.send(`
    <h1>üìö –°–µ—Ä–≤–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –†–ì–ê–¢–£</h1>
    <p>GET <a href="/api/schedule">/api/schedule</a> ‚Äî –ø–æ–ª—É—á–∏—Ç—å –≤—Å—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</p>
    <p>–ö–µ—à: ${cachedSchedule ? '–¥–∞' : '–Ω–µ—Ç'}</p>
  `);
});

app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});