const express = require('express');
const cors = require('cors');
const axios = require('axios');
const cheerio = require('cheerio');
const fs = require('fs');
const path = require('path');
const XLSX = require('xlsx');
const cron = require('node-cron');

const app = express();

// ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 1: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π PORT
const PORT = process.env.PORT || 5000;

// ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 2: –£–±—Ä–∞–Ω—ã –ø—Ä–æ–±–µ–ª—ã –≤ URL
const BASE_URL = 'https://www.rsatu.ru';
const SCHEDULE_PAGE_URL = 'https://www.rsatu.ru/students/raspisanie-zanyatiy/';
const TARGET_LINK_TEXT = '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π';

// ‚ùå –£–±–∏—Ä–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ ./downloads ‚Äî Render –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç —Ñ–∞–π–ª—ã
// const DOWNLOAD_DIR = './downloads';
// if (!fs.existsSync(DOWNLOAD_DIR)) {
//   fs.mkdirSync(DOWNLOAD_DIR, { recursive: true });
// }

app.use(cors());
app.use(express.json());

// ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 3: –ü—Ä–æ—Å—Ç–æ–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
app.get('/', (req, res) => {
  res.send(`
    <h1>üöÄ –°–µ—Ä–≤–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –†–ì–ê–¢–£</h1>
    <p>–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π <code>POST /api/schedule</code></p>
  `);
});

// === –ü–ê–†–°–ò–ù–ì –°–°–´–õ–ö–ò ===
async function findScheduleLink() {
  try {
    const response = await axios.get(SCHEDULE_PAGE_URL, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
      }
    });

    const $ = cheerio.load(response.data);
    const links = [];

    $('a').each((i, el) => {
      const text = $(el).text().trim();
      const href = $(el).attr('href');
      if (!href) return;

      // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π fullUrl
      let fullUrl;
      try {
        fullUrl = new URL(href, SCHEDULE_PAGE_URL).href;
      } catch (err) {
        return; // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –±–∏—Ç—ã–µ —Å—Å—ã–ª–∫–∏
      }

      if (
        text.includes(TARGET_LINK_TEXT) ||
        text.toLowerCase().includes('—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ') ||
        href.includes('.xlsx')
      ) {
        links.push({ text, href, fullUrl });
      }
    });

    if (links.length === 0) throw new Error('–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');

    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: .xlsx
    const excelLink = links.find(l => l.fullUrl.includes('.xlsx'));
    return (excelLink || links[0]).fullUrl;
  } catch (err) {
    console.error('‚ùå –ü–∞—Ä—Å–∏–Ω–≥ —Å—Å—ã–ª–∫–∏:', err.message);
    throw err;
  }
}

// === –°–ö–ê–ß–ò–í–ê–ù–ò–ï –ò –û–ë–†–ê–ë–û–¢–ö–ê –í –ü–ê–ú–Ø–¢–ò (–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ –¥–∏—Å–∫) ===
async function fetchAndParseExcel(url, targetGroup) {
  try {
    const response = await axios.get(url, {
      responseType: 'arraybuffer',
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        'Referer': SCHEDULE_PAGE_URL
      }
    });

    // ‚úÖ –ß–∏—Ç–∞–µ–º Excel –∏–∑ –ø–∞–º—è—Ç–∏ (–±–µ–∑ fs!)
    const workbook = XLSX.read(response.data, { type: 'buffer' });
    const sheet = workbook.Sheets[workbook.SheetNames[0]];
    const data = XLSX.utils.sheet_to_json(sheet, { header: 1, defval: "" });

    let groupColIndex = -1;

    // –ü–æ–∏—Å–∫ –∫–æ–ª–æ–Ω–∫–∏ —Å –≥—Ä—É–ø–ø–æ–π
    for (let rowIdx = 0; rowIdx < Math.min(data.length, 20); rowIdx++) {
      const row = data[rowIdx] || [];
      for (let colIdx = 3; colIdx < row.length; colIdx++) {
        const cell = String(row[colIdx]).trim();
        if (cell.toUpperCase() === targetGroup.toUpperCase()) {
          groupColIndex = colIdx;
          break;
        }
      }
      if (groupColIndex !== -1) break;
    }

    if (groupColIndex === -1) {
      throw new Error(`–ì—Ä—É–ø–ø–∞ "${targetGroup}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    }

    const result = [];

    for (let rowIdx = 1; rowIdx < data.length; rowIdx++) {
      const row = data[rowIdx] || [];
      const week = (row[0] ? String(row[0]).trim() : "") || findLastValue(data, 0, rowIdx);
      const day = (row[1] ? String(row[1]).trim() : "") || findLastValue(data, 1, rowIdx);
      const number = (row[2] ? String(row[2]).trim() : "") || findLastValue(data, 2, rowIdx);
      const subject = row[groupColIndex] ? String(row[groupColIndex]).trim() : "";

      if (subject && (week || day)) {
        result.push({ week, day, number, subject });
      }
    }

    if (result.length === 0) {
      throw new Error(`–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è "${targetGroup}" –Ω–∞–π–¥–µ–Ω–æ, –Ω–æ –ø—Ä–µ–¥–º–µ—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã`);
    }

    return result;
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel:", err.message);
    throw err;
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –Ω–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–µ–ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—à–µ
function findLastValue(data, col, fromRow) {
  for (let i = fromRow - 1; i >= 0; i--) {
    if (data[i]?.[col]) return String(data[i][col]).trim();
  }
  return "";
}

// === API ===
app.post('/api/schedule', async (req, res) => {
  const { group } = req.body;

  if (!group || !group.trim()) {
    return res.status(400).json({ success: false, error: '–ù–µ —É–∫–∞–∑–∞–Ω–∞ –≥—Ä—É–ø–ø–∞' });
  }

  try {
    const link = await findScheduleLink();
    const schedule = await fetchAndParseExcel(link, group.trim());

    res.json({
      success: true,
      schedule,
      lastUpdated: new Date().toISOString(),
      source: link
    });
  } catch (err) {
    res.status(500).json({
      success: false,
      error: err.message
    });
  }
});

// ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 4: Cron ‚Äî –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å, –Ω–æ –∑–Ω–∞–π: –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º Render –º–æ–∂–µ—Ç "—Å–ø–∞—Ç—å"
// cron.schedule('0 */6 * * *', async () => {
//   console.log('‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...');
//   try {
//     const link = await findScheduleLink();
//     console.log(`‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: ${link}`);
//   } catch (err) {
//     console.error('‚ùå –û—à–∏–±–∫–∞:', err.message);
//   }
// });

// ‚úÖ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});