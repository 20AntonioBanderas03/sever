const fs = require('fs');
const path = require('path');
const { promisify } = require('util');
const pipeline = promisify(require('stream').pipeline);

// –ü–∞–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const UPLOAD_DIR = path.join(__dirname, 'uploads');
if (!fs.existsSync(UPLOAD_DIR)) {
  fs.mkdirSync(UPLOAD_DIR, { recursive: true });
}

// –ü—É—Ç—å –∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É
const CURRENT_SCHEDULE_PATH = path.join(UPLOAD_DIR, 'current-schedule.xlsx');

// ‚úÖ –≠–Ω–¥–ø–æ–∏–Ω—Ç: –∑–∞–≥—Ä—É–∑–∫–∞ Excel
app.post('/api/upload-schedule', async (req, res) => {
  try {
    if (!req.headers['content-type']?.includes('multipart/form-data')) {
      return res.status(400).json({ error: '–û–∂–∏–¥–∞–µ—Ç—Å—è multipart/form-data' });
    }

    // –û—á–µ–Ω—å —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä multipart (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞)
    const boundary = req.headers['content-type'].split('boundary=')[1];
    const chunks = [];

    for await (const chunk of req) {
      chunks.push(chunk);
    }

    const body = Buffer.concat(chunks);
    const parts = body.split(Buffer.from(`--${boundary}`));

    let fileBuffer = null;
    let filename = '';

    for (const part of parts) {
      if (part.includes('filename="')) {
        const headerEnd = part.indexOf('\r\n\r\n');
        const headers = part.slice(0, headerEnd);
        const content = part.slice(headerEnd + 4); // +4 = \r\n\r\n

        const filenameMatch = headers.toString().match(/filename="(.+?)"/);
        filename = filenameMatch ? filenameMatch[1] : 'schedule.xlsx';

        // –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π --\r\n
        const cleanContent = content.slice(0, content.lastIndexOf('\r\n'));
        fileBuffer = cleanContent;
        break;
      }
    }

    if (!fileBuffer) {
      return res.status(400).json({ error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–ø—Ä–æ—Å–µ' });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    await fs.promises.writeFile(CURRENT_SCHEDULE_PATH, fileBuffer);

    // –û—á–∏—â–∞–µ–º –∫–µ—à
    cachedSchedule = null;

    res.json({
      success: true,
      message: '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω',
      filename,
      size: fileBuffer.length
    });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', err);
    res.status(500).json({
      success: false,
      error: err.message
    });
  }
});

// ‚úÖ –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º fetchFullSchedule ‚Äî —á–∏—Ç–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
async function fetchFullSchedule() {
  // üîç –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
  try {
    await fs.promises.access(CURRENT_SCHEDULE_PATH);
    const buffer = await fs.promises.readFile(CURRENT_SCHEDULE_PATH);
    const workbook = XLSX.read(buffer, { type: 'buffer' });
    // ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel)
    return parseWorkbook(workbook); // –≤—ã–Ω–µ—Å–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
  } catch (err) {
    console.log('‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–∞—Ä—Å–∏–º —Å —Å–∞–π—Ç–∞...');
  }

  // –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø–∞—Ä—Å–∏–º —Å —Å–∞–π—Ç–∞ (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
  // ... (—Å—Ç–∞—Ä—ã–π –∫–æ–¥ —Å axios –∏ fallback)
}